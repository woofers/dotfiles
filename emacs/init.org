
#+TITLE:    Emacs Configuration
#+AUTHOR:   Jaxson Van Doorn
#+EMAIL:    jaxson.vandoorn@gmail.com
#+OPTIONS:  num:nil

* Plug-Ins
** Load Package.el and MELPA Repository
 #+BEGIN_SRC emacs-lisp
 (require 'package)
 (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
 (package-initialize)
 #+END_SRC

** Disable Plug-Ins at Startup
 #+BEGIN_SRC emacs-lisp
 (setq package-enable-at-startup nil)
 #+END_SRC

** Install Packages on Initial Install
 #+BEGIN_SRC emacs-lisp
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
 (eval-when-compile
   (require 'use-package))
 #+END_SRC

** Load Directories
 #+BEGIN_SRC emacs-lisp
 (defun load-all-in-directory (dir)
   "`load' all elisp libraries in directory DIR which are not already loaded."
   (interactive "D")
   (let ((libraries-loaded (mapcar #'file-name-sans-extension
                                   (delq nil (mapcar #'car load-history)))))
     (dolist (file (directory-files dir t ".+\\.elc?$"))
       (let ((library (file-name-sans-extension file)))
         (unless (member library libraries-loaded)
           (load library nil t)
           (push library libraries-loaded))))))
 #+END_SRC
** System Type
 #+BEGIN_SRC emacs-lisp
 (defmacro with-system (type &rest body)
   "Evaluate BODY if `system-type' equals TYPE."
   (declare (indent defun))
   `(when (eq system-type ',type)
      ,@body))
 #+END_SRC
** Separate Custom File
 #+BEGIN_SRC emacs-lisp
 (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
 (load custom-file 'noerror)
 #+END_SRC

** Allow File Loading
 #+BEGIN_SRC emacs-lisp
 (use-package load-dir
     :ensure t)
 #+END_SRC

** Load Evil Packages
 #+BEGIN_SRC emacs-lisp
 (org-babel-load-file "~/.emacs.d/lisp/init-evil.org")
 (require 'init-evil)
 #+END_SRC

** Load Org Packages
 #+BEGIN_SRC emacs-lisp
 (org-babel-load-file "~/.emacs.d/lisp/init-org.org")
 (require 'init-org)
 #+END_SRC

** Load Helm Packages
 #+BEGIN_SRC emacs-lisp
 (load-file "~/.emacs.d/lisp/init-helm.el")
 (require 'init-helm)
 #+END_SRC

** Load Powerline Packages
 #+BEGIN_SRC emacs-lisp
 (load-file "~/.emacs.d/lisp/init-powerline.el")
 (require 'init-powerline)
 #+END_SRC

** Load General Packages
 #+BEGIN_SRC emacs-lisp

 (use-package magit
     :ensure t)

 (use-package ranger
     :ensure t)

 (use-package company
     :ensure t)

 (use-package company-lua
     :ensure t)

 (use-package which-key
     :ensure t)

 (use-package git-gutter-fringe
     :ensure t)

 (use-package nlinum-relative
     :ensure t)

 (use-package highlight
     :ensure t)

 (use-package highlight-indent-guides
     :ensure t)

 (use-package pcomplete-extension
     :ensure t)

 (use-package eshell-git-prompt
     :ensure t)

 (use-package eterm-256color
     :ensure t)

 (use-package imenu-list
     :ensure t)

 (use-package go-mode
     :ensure t)

 (use-package gradle-mode
     :ensure t)

 (use-package groovy-mode
     :ensure t)

 (use-package markdown-mode
     :ensure t)

 (use-package typescript-mode
     :ensure t)

 (use-package yaml-mode
     :ensure t)

 (use-package moonscript
     :ensure t)

 (use-package web-mode
     :ensure t)

 (use-package json-mode
     :ensure t)

 (use-package haxe-mode
     :ensure t)

 (use-package ledger-mode
     :ensure t)

 (use-package sml-mode
     :ensure t)

 (use-package racket-mode
     :ensure t)

 (use-package haxe-imports
     :ensure t)

 (use-package wttrin
     :ensure t)

 (use-package ispell
     :ensure t)

 (use-package flyspell
     :ensure t)

 (use-package esup
     :ensure t)

 (add-to-list 'load-path (expand-file-name "~/.emacs.d/non-elpa/speck"))

 (require 'speck)

 (add-to-list 'load-path (expand-file-name "~/.emacs.d/non-elpa/origami"))

 (require 'origami)

#+END_SRC
** Load GNU Packages
 #+BEGIN_SRC emacs-lisp
 (with-system gnu/linux
     (load-file "~/.emacs.d/non-elpa/tag/tag.el")
 )
 #+END_SRC
* Settings
** Personal Info
 #+BEGIN_SRC emacs-lisp
 (setq user-full-name "Jaxson Van Doorn"
       calendar-latitude 48.6
       calendar-longitude -123.4
       calendar-location-name "Victoria, BC")
 #+END_SRC

** Load Theme
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'custom-theme-load-path "~/.emacs.d/non-elpa/challenger-deep")
 (load-theme 'challenger-deep t)
 #+END_SRC

** Ranger
*** Use Ranger Instead of Dired
  #+BEGIN_SRC emacs-lisp
  (ranger-override-dired-mode t)
  #+END_SRC
*** Visual Settings
  #+BEGIN_SRC emacs-lisp
  (setq ranger-parent-depth 3)
  (setq ranger-width-preview 0.5)
  #+END_SRC
*** Hide Binary Files
  #+BEGIN_SRC emacs-lisp
  (setq ranger-dont-show-binary t)
  #+END_SRC
*** Remove Ranger Buffers as Needed
  #+BEGIN_SRC emacs-lisp
  (setq ranger-cleanup-eagerly t)
  #+END_SRC

** Enable Which Key
 #+BEGIN_SRC emacs-lisp
 (which-key-mode)
 #+END_SRC

** Use Relative Line Numbers
 #+BEGIN_SRC emacs-lisp
 (nlinum-relative-setup-evil)
 #+END_SRC

** Show Git Changes in Right Hand Gutter
 #+BEGIN_SRC emacs-lisp
 (setq git-gutter-fr:side 'right-fringe)
 #+END_SRC

** Show Indentation as a Vertical Line
 #+BEGIN_SRC emacs-lisp
 (setq highlight-indent-guides-method 'character)
 #+END_SRC

** Weather Settings
*** Use Victoria Airport
  #+BEGIN_SRC emacs-lisp
  (setq wttrin-default-cities '("YYJ"))
  #+END_SRC

*** Use English
  #+BEGIN_SRC emacs-lisp
  (setq wttrin-default-accept-language '("Accept-Language" . "en-US"))
  #+END_SRC

** Spellcheck
 #+BEGIN_SRC emacs-lisp
 (setq ispell-program-name "/usr/bin/ispell")
 #+END_SRC
** Git Diff
 #+BEGIN_SRC emacs-lisp
 (setq magit-diff-arguments '("--stat" "--no-ext-diff" "--ignore-all-space" "--ignore-space-change"))
 #+END_SRC
** Gradlew Mode
 #+BEGIN_SRC emacs-lisp
  (setq gradle-gradlew-executable "./gradlew")
  (setq gradle-use-gradlew t)
 #+END_SRC
* Behavior
** Startup
*** Disable Splash Screen
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
  #+END_SRC

*** Open Blank Scratch
  #+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  #+END_SRC

*** Default Directory
  #+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
  #+END_SRC

** UI
*** Disable Menu
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  #+END_SRC
*** Disable Toolbar
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  #+END_SRC
*** Hide Scroll Bar
  #+BEGIN_SRC emacs-lisp
  (when (boundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
  #+END_SRC
*** Better Scrolling
  #+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
  #+END_SRC
*** Powerline Info
  #+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  #+END_SRC
*** Abbreviated Yes or No
  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
*** Show End of Compilation
  #+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  #+END_SRC
*** Disables Visual and Audio "Bell"
  #+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'ignore)
  #+END_SRC
*** Orange Carret
  #+BEGIN_SRC emacs-lisp
  (set-cursor-color "#fdbf82")
  #+END_SRC
*** Show Wrapped Lines
  #+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (setq-default left-fringe-width nil)
  (setq-default indicate-empty-lines t)
  #+END_SRC
*** Highlight Lines Over Width Limit
  #+BEGIN_SRC emacs-lisp
  (defvar max-line-width 140 "Max width of lines")
  (setq whitespace-line-column max-line-width)
  (setq whitespace-style '(face lines-tail))
  (setq-default fill-column max-line-width)
  #+END_SRC
*** Allow Custom Themes
  #+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  #+END_SRC
*** Set Title Bar
  #+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%b - Emacs")
  #+END_SRC
*** Highlight Current Line
  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  #+END_SRC
*** Relative Line Numbers
**** Change Update Frequency
   #+BEGIN_SRC emacs-lisp
   (setq nlinum-relative-redisplay-delay 0.018)
   #+END_SRC
**** Set Offset to Zero
   #+BEGIN_SRC emacs-lisp
   (setq nlinum-relative-offset 0)
   #+END_SRC
*** Use Same Frame With Newly Opened File
  #+BEGIN_SRC emacs-lisp
  (setq ns-pop-up-frames nil)
  #+END_SRC
*** Eshell
  #+BEGIN_SRC emacs-lisp
  (eshell-git-prompt-use-theme 'powerline)
  #+END_SRC
** Editing
*** Newline at End of File
  #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
  #+END_SRC
*** Disable Warning for Large Files
  #+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold nil)
  #+END_SRC
*** Follow Symbolic Links
  #+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  #+END_SRC
*** Better Auto-Save and Auto-Backup
**** Remove Lockfiles
   #+BEGIN_SRC emacs-lisp
   (setq create-lockfiles nil)
   #+END_SRC
**** Move Backup Directory
   #+BEGIN_SRC emacs-lisp
   (defvar backup-directory (concat user-emacs-directory "backups"))
   (if (not (file-exists-p backup-directory))
       (make-directory backup-directory t))
   (setq backup-directory-alist `(("." . ,backup-directory)))
   #+END_SRC
**** Auto-Save Frequency and Other Settings
   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files t               ; Backup on Save
         backup-by-copying t               ; Do not Clutter Symlinks
         version-control t                 ; Add Version Number
         delete-old-versions t             ; Delete Old Backup File
         delete-by-moving-to-trash t       ; Permanat Delete
         kept-old-versions 3               ; Oldest Versions
         kept-new-versions 3               ; Newest Versions
         auto-save-default t               ; Auto-Save on Buffer Switch
         auto-save-timeout 60              ; Number of Second Between Auto-Saves
         auto-save-interval 200            ; Number of Characters
                                           ; Typed Between Auto-Save
   )
   #+END_SRC
*** Indentation
  #+BEGIN_SRC emacs-lisp
  (defvar tab-spaces 4 "Spaces per tab")
  (setq-default tab-width tab-spaces)
  (setq tab-width tab-spaces)
  (setq-default indent-tabs-mode nil)
  (setq tab-always-indent 'complete)

  (when (fboundp 'electric-indent-mode) (electric-indent-mode 1))
  #+END_SRC
*** Place Only One Space at the End of a Sentence
  #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  #+END_SRC
*** Font
  #+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (set-frame-font "Meslo LG M Regular for Powerline 10" nil t)
  )
  (if (eq system-type 'gnu/linux)
      (set-frame-font "-PfEd-Meslo LG M for Powerline-normal-normal-normal-*-*-*-*-*-0-iso10646-1" nil t)
  )
  #+END_SRC
*** Default Split is Vertical
  #+BEGIN_SRC emacs-lisp
  (setq split-width-threshold nil)
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
  #+END_SRC
*** Clipboard
  #+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill nil)
  #+END_SRC
*** Match Braces
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode)
  #+END_SRC
* Functions
** Backspace to Tab
 #+BEGIN_SRC emacs-lisp
 (defun backspace-whitespace-to-tab-stop ()
   "Delete whitespace backwards to the next tab-stop, otherwise delete one character."
   (interactive)
   (if (or indent-tabs-mode
           (region-active-p)
           (save-excursion
             (> (point) (progn (back-to-indentation)
                               (point)))))
       (call-interactively 'backward-delete-char-untabify)
     (let ((movement (% (current-column) tab-spaces))
           (p (point)))
       (when (= movement 0) (setq movement tab-spaces))
       ;; Account for edge case near beginning of buffer
       (setq movement (min (- p 1) movement))
       (save-match-data
         (if (string-match "[^\t ]*\\([\t ]+\\)$" (buffer-substring-no-properties (- p movement) p))
             (backward-delete-char (- (match-end 1) (match-beginning 1)))
           (call-interactively 'backward-delete-char))))))
 #+END_SRC

** Untabify Whole Buffer
 #+BEGIN_SRC emacs-lisp
 (defvar untabify-this-buffer)
  (defun untabify-all()
    "Untabify the current buffer, unless `untabify-this-buffer' is nil."
    (and untabify-this-buffer (untabify (point-min) (point-max))))
  (define-minor-mode untabify-mode
    "Untabify buffer on save." nil " untab" nil
    (make-variable-buffer-local 'untabify-this-buffer)
    (setq untabify-this-buffer (not (derived-mode-p 'makefile-mode)))
 (add-hook 'before-save-hook #'untabify-all))
 (add-hook 'prog-mode-hook 'untabify-mode)
 (add-hook 'haxe-mode-hook 'untabify-mode)
 #+END_SRC

** Flyspell Uses Popup.el
 #+BEGIN_SRC emacs-lisp
 (defun flyspell-emacs-popup-textual (event poss word)
   "A textual flyspell popup menu."
   (require 'popup)
   (let* ((corrects (if flyspell-sort-corrections
                        (sort (car (cdr (cdr poss))) 'string<)
                      (car (cdr (cdr poss)))))
          (cor-menu (if (consp corrects)
                        (mapcar (lambda (correct)
                                  (list correct correct))
                                corrects)
                      '()))
          (affix (car (cdr (cdr (cdr poss)))))
          show-affix-info
          (base-menu  (let ((save (if (and (consp affix) show-affix-info)
                                      (list
                                       (list (concat "Save affix: " (car affix))
                                             'save)
                                       '("Accept (session)" session)
                                       '("Accept (buffer)" buffer))
                                    '(("Save word" save)
                                      ("Accept (session)" session)
                                      ("Accept (buffer)" buffer)))))
                        (if (consp cor-menu)
                            (append cor-menu (cons "" save))
                          save)))
          (menu (mapcar
                 (lambda (arg) (if (consp arg) (car arg) arg))
                 base-menu)))
     (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))
 #+END_SRC

** Maximize Window
 #+BEGIN_SRC emacs-lisp
 (defun windows-maximize-frame()
   "Maximizes the active frame in Windows"
   (interactive)
   ;; Send a `WM_SYSCOMMAND' message to the active frame with the
   ;; `SC_MAXIMIZE' parameter.
   (when (eq system-type 'windows-nt)
     (w32-send-sys-command 61488)))
 #+END_SRC
** Edit as Root
 #+BEGIN_SRC emacs-lisp
 (defun sudo-edit (&optional arg)
   "Edit currently visited file as root.
   With a prefix ARG prompt for a file to visit.
   Will also prompt for a file to visit if current
   buffer is not visiting a file."
   (interactive "P")
   (if (or arg (not buffer-file-name))
       (find-file (concat "/sudo:root@localhost:"
                          (ido-read-file-name "Find file(as root): ")))
     (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
 #+END_SRC
** Run new Eshell
 #+BEGIN_SRC emacs-lisp
 (defun new-eshell (&optional arg)
   "Runs a new eshell instance"
   (interactive)
   (eshell ""))
 #+END_SRC
** Gradle
*** Task Execute
  #+BEGIN_SRC emacs-lisp
  (defun gradle-execute-subproject (project task)
    "Executes a Gradle subproject with a given task"
    (interactive "sSubproject: \nsTask: ")
    (if (s-blank? project)
      (setq arg task)
      (setq arg (concat (concat project ":") task)))
    (gradle-execute arg))
  #+END_SRC
*** Task Run
  #+BEGIN_SRC emacs-lisp
  (defun gradle-run-subproject (project)
    "Runs a Gradle task"
    (interactive "sSubproject: ")
    (gradle-execute-subproject project "run"))
  #+END_SRC
*** List Tasks
  #+BEGIN_SRC emacs-lisp
  (defun gradle-tasks (project)
    "List Gradle tasks"
    (interactive "sSubproject: ")
    (gradle-execute-subproject project "task"))
  #+END_SRC
*** Desktop Run
  #+BEGIN_SRC emacs-lisp
  (defun gradle-desktop-run ()
    "Runs a desktop Gradle task"
    (interactive)
    (gradle-run-subproject "desktop"))
  #+END_SRC
* Aliases
** Git
*** Status
  #+BEGIN_SRC emacs-lisp
  (defun git()
    "Calls maggit-status"
    (interactive)
    (magit-status))
  #+END_SRC
*** Diff
  #+BEGIN_SRC emacs-lisp
  (defun git-diff(&optional rev-or-range)
    "Calls maggit-diff"
    (interactive)
    (if (equal rev-or-range nil)
      (setq rev-or-range "master"))
    (magit-diff rev-or-range))
  #+END_SRC
** Email
 #+BEGIN_SRC emacs-lisp
 (defun email()
   "Calls mu4e"
   (interactive)
   (mu4e))
 #+END_SRC
** Weather
 #+BEGIN_SRC emacs-lisp
 (defun weather(city)
   "Calls wttrin"
   (interactive)
   (wttrin city))
 #+END_SRC
** Spell Check
 #+BEGIN_SRC emacs-lisp
 (defun spell()
   "Calls speck on Windows and
    flyspell on GNU/Linux"
   (interactive)
   (with-system gnu/linux
     (if flyspell-mode
       (flyspell-mode -1)
       (flyspell-mode 1))
   )
   (with-system windows
     (if speck-mode
       (speck-mode -1)
       (speck-mode 1))
   ))
 #+END_SRC
* Mappings
** Map Backspace Tab
 #+BEGIN_SRC emacs-lisp
 (global-set-key [backspace] 'backspace-whitespace-to-tab-stop)
 #+END_SRC

** Save Buffer
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-s") 'save-buffer)
 #+END_SRC
* Hooks
** Delete Trailing Whitespace on Save
 #+BEGIN_SRC emacs-lisp
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
 #+END_SRC

** Show Whitespace in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook 'whitespace-mode)
 #+END_SRC
** Enable Flyspell for Commit Messages
 #+BEGIN_SRC emacs-lisp
 (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
 #+END_SRC
** Spellcheck for Newly Opened File
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'spell)
 #+END_SRC
** Auto Complete
 #+BEGIN_SRC emacs-lisp
 (add-hook 'after-init-hook 'global-company-mode)
 #+END_SRC
** Camel Case in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook 'subword-mode)
 #+END_SRC

** Relative Line Number
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'nlinum-relative-mode)
 #+END_SRC

** Show Indentation
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'highlight-indent-guides-mode)
 #+END_SRC

** Highlight Escape Characters in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook '(lambda ()
     (highlight-regexp "%[[:alpha:]]\\|\\\\[[:alpha:]]" font-lock-keyword-face
 )))
 #+END_SRC

** Show Git Changes in Gutter
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'git-gutter-mode)
 #+END_SRC

** Additional Syntax Highlighting
*** Assembly Mode
 #+BEGIN_SRC emacs-lisp
 (defun asm-hook ()
   (when (string= (file-name-extension buffer-file-name) "pep")
     (asm-mode))
 )
 (add-hook 'find-file-hook 'asm-hook)
 #+END_SRC

*** Pico-8 Mode
 #+BEGIN_SRC emacs-lisp
 (defun pico-hook ()
   (when (string= (file-name-extension buffer-file-name) "p8")
     (lua-mode))
 )
 (add-hook 'find-file-hook 'pico-hook)
 #+END_SRC
*** JavaScript Mode
 #+BEGIN_SRC emacs-lisp
 (defun mjs-hook ()
   (when (string= (file-name-extension buffer-file-name) "mjs")
     (javascript-mode))
 )
 (add-hook 'find-file-hook 'mjs-hook)
 #+END_SRC
*** Typescript Mode
 #+BEGIN_SRC emacs-lisp
 (defun typescript-hook ()
   (when (string= (file-name-extension buffer-file-name) "ts")
     (typescript-mode))
   (when (string= (file-name-extension buffer-file-name) "tsx")
     (typescript-mode))
 )
 (add-hook 'find-file-hook 'typescript-hook)
 #+END_SRC
*** YAML Mode
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
 #+END_SRC
** Eshell Completion
 #+BEGIN_SRC emacs-lisp
 (add-hook 'eshell-mode-hook
     (lambda ()
         (eshell-cmpl-initialize)
         (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
         (define-key eshell-mode-map (kbd "M-h") 'helm-eshell-history)))
 #+END_SRC
** Eshell Colors
 #+BEGIN_SRC emacs-lisp
 (require 'eshell)

 (add-hook 'eshell-mode-hook
           (lambda ()
             (setq xterm-color-preserve-properties t)))
 #+END_SRC
** Terminal Mode 256 Colors
 #+BEGIN_SRC emacs-lisp
 (add-hook 'term-mode-hook #'eterm-256color-mode)
 #+END_SRC
** Disable Line Highlighting Eshell
 #+BEGIN_SRC emacs-lisp
 (add-hook 'eshell-mode-hook (lambda ()
      (setq-local global-hl-line-mode
          nil)))
 (add-hook 'term-mode-hook (lambda ()
     (setq-local global-hl-line-mode
                 nil)))
 #+END_SRC
** Diminish Whitespace Mode
 #+BEGIN_SRC emacs-lisp
 (diminish 'untabify-mode)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)

  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)

;; if you use typescript-mode
(add-hook 'typescript-mode-hook #'setup-tide-mode)
;; if you use treesitter based typescript-ts-mode (emacs 29+)
(add-hook 'typescript-ts-mode-hook #'setup-tide-mode)

(add-hook 'tsx-ts-mode-hook #'setup-tide-mode)
#+END_SRC
