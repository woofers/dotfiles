
#+TITLE:	Evil Configuration
#+AUTHOR:	Jaxson Van Doorn
#+EMAIL:	jaxson.vandoorn@gmail.com
#+OPTIONS:  num:nil

* Plug-Ins
** Install Evil Mode
 #+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
 #+END_SRC

** Install Evil Plugins
 #+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t)

  (use-package evil-surround
    :ensure t)

  (use-package evil-indent-textobject
    :ensure t)
 #+END_SRC
** Install Evil Magit
 #+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
 #+END_SRC
** Install Evil Ledger
 #+BEGIN_SRC emacs-lisp
 (use-package evil-ledger
   :ensure t)
 #+END_SRC
* Behavior
** Enable Evil Leader
 #+BEGIN_SRC emacs-lisp
 (global-evil-leader-mode)
 #+END_SRC
** Enable Evil Surround
 #+BEGIN_SRC emacs-lisp
 (global-evil-surround-mode)
 #+END_SRC
** Enable Evil Search
 #+BEGIN_SRC emacs-lisp
 (add-hook 'occur-mode-hook
           (lambda ()
             (evil-add-hjkl-bindings occur-mode-map 'emacs
               (kbd "/")       'evil-search-forward
               (kbd "n")       'evil-search-next
               (kbd "N")       'evil-search-previous
               (kbd "C-d")     'evil-scroll-down
               (kbd "C-u")     'evil-scroll-up
               (kbd "C-w C-w") 'other-window)))
 #+END_SRC
** Enable Scroll with Ctrl U
 #+BEGIN_SRC emacs-lisp
 (setq evil-want-C-u-scroll t)
 #+END_SRC
** Dot Not Auto-complete on Mode Change
 #+BEGIN_SRC emacs-lisp
 (setq evil-want-abbrev-expand-on-insert-exit nil)
 #+END_SRC

* Functions
** Java Function Jump
 #+BEGIN_SRC emacs-lisp

 (defvar java-function-regexp
   (concat
    "^[ \t]*"                                   ; leading white space
    "\\(public\\|private\\|protected\\|"        ; some of these 8 keywords
    "abstract\\|final\\|static\\|"
    "synchronized\\|native"
    "\\|[ \t\n\r]\\)*"                          ; or whitespace
    "[a-zA-Z0-9_$]+"                            ; return type
    "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
    "[ \t\n\r]+"                                ; whitespace
    "\\([a-zA-Z0-9_$]+\\)"                      ; the name we want!
    "[ \t\n\r]*"                                ; optional whitespace
    "("                                         ; open the param list
    "\\([ \t\n\r]*"                             ; optional whitespace
    "\\<[a-zA-Z0-9_$]+\\>"                      ; typename
    "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
    "[ \t\n\r]+"                                ; whitespace
    "\\<[a-zA-Z0-9_$]+\\>"                      ; variable name
    "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
    "[ \t\n\r]*,?\\)*"                          ; opt whitespace and comma
    "[ \t\n\r]*"                                ; optional whitespace
    ")"                                         ; end the param list
 ))

 (defun my-next-java-method()
   (interactive)
   (re-search-forward java-function-regexp nil t)
 )

 (defun my-prev-java-method()
   (interactive)
   (re-search-backward java-function-regexp nil t)
 )
 #+END_SRC
** Move Block of Text
 #+BEGIN_SRC emacs-lisp

 (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
             (exchange-point-and-mark))
      (let ((column (current-column))
               (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
             (transpose-lines arg))
        (forward-line -1))))
 )
#+END_SRC
** Move Block of Text Down
 #+BEGIN_SRC emacs-lisp
 (defun move-text-down (arg)
     "Move region (transient-mark-mode active) or current line
      arg lines down."
     (interactive "*p")
     (move-text-internal arg)
 )
 #+END_SRC
** Move Block of Text Up
 #+BEGIN_SRC emacs-lisp
 (defun move-text-up (arg)
     "Move region (transient-mark-mode active)
     or current linearg lines up."
     (interactive "*p")
     (move-text-internal (- arg))
 )
 #+END_SRC
** Shift Text Left or Right
 #+BEGIN_SRC emacs-lisp
 (defun unindent-dwim (&optional count-arg)
   "Keeps relative spacing in the region.  Unindents to the next multiple of the current tab-width"
   (interactive)
   (let ((deactivate-mark nil)
         (beg (or (and mark-active (region-beginning)) (line-beginning-position)))
         (end (or (and mark-active (region-end)) (line-end-position)))
         (min-indentation)
         (count (or count-arg 1)))
     (save-excursion
       (goto-char beg)
       (while (< (point) end)
         (add-to-list 'min-indentation (current-indentation))
         (forward-line)))
     (if (< 0 count)
         (if (not (< 0 (apply 'min min-indentation)))
             (error "Can't indent any more.  Try `indent-rigidly` with a negative arg.")))
     (if (> 0 count)
         (indent-rigidly beg end (* (- 0 tab-width) count))
       (let (
             (indent-amount
              (apply 'min (mapcar (lambda (x) (- 0 (mod x tab-width))) min-indentation))))
         (indent-rigidly beg end (or
                                  (and (< indent-amount 0) indent-amount)
                                  (* (or count 1) (- 0 tab-width))))))))
 #+END_SRC
** Only Paste Yanks
 #+BEGIN_SRC emacs-lisp
 (defun evil-paste-before-from-0 ()
   (interactive)
   (let ((evil-this-register ?0))
     (call-interactively 'evil-paste-before)))
 (defun evil-paste-before-from-0-move ()
   (interactive)
   (evil-paste-before-from-0)
   (evil-forward-char))
 (defun evil-paste-after-from-0 ()
   (interactive)
   (let ((evil-this-register ?0))
     (call-interactively 'evil-paste-after)))
 (defun evil-delete-from-0 ()
   (interactive)
   (let ((evil-this-register ?0))
     (call-interactively 'evil-delete)))
 #+END_SRC
* Mappings
** Move Text Up and Down
 #+BEGIN_SRC emacs-lisp
 (define-key evil-normal-state-map (kbd "C-j") 'move-text-down)
 (define-key evil-normal-state-map (kbd "C-k") 'move-text-up)
 #+END_SRC
** Only Paste Yanked Text
 #+BEGIN_SRC emacs-lisp
 (define-key evil-normal-state-map "p" 'evil-paste-after-from-0)
 (define-key evil-normal-state-map "P" 'evil-paste-before-from-0)
 (define-key evil-normal-state-map "d" 'evil-delete-from-0)
 (global-set-key (kbd "<S-insert>") 'evil-paste-before-from-0-move)
 (global-set-key (kbd "C-p") 'clipboard-yank)
 (define-key evil-normal-state-local-map "\C-p" 'clipboard-yank)
 #+END_SRC
** On Evil Maps Load
 #+BEGIN_SRC emacs-lisp
 (with-eval-after-load 'evil-maps
 #+END_SRC
*** Remap Command Prompt
  #+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map ";" 'evil-ex)
  (define-key evil-motion-state-map ":" nil)
  #+END_SRC

*** Remap Insert Keys
  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "o" 'evil-append)
  (define-key evil-normal-state-map "O" 'evil-append-line)
  (define-key evil-visual-state-map "O" 'evil-append)
  (define-key evil-normal-state-map "i" 'evil-insert)
  (define-key evil-normal-state-map "I" 'evil-insert-line)
  (define-key evil-visual-state-map "O" 'evil-insert)
  (define-key evil-normal-state-map "a" 'evil-open-below)
  (define-key evil-normal-state-map "A" 'evil-open-above)
  #+END_SRC

*** Unbind Arrow Keys in Motion Mode
  #+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map [left] nil)
  (define-key evil-motion-state-map [right] nil)
  (define-key evil-motion-state-map [up] nil)
  (define-key evil-motion-state-map [down] nil)
  #+END_SRC

*** Spellcheck Prompt
  #+BEGIN_SRC emacs-lisp
   (with-system gnu/linux
     (define-key evil-normal-state-map "r" #'flyspell-correct-word-before-point)
     (eval-after-load "flyspell"
       '(progn
          (fset 'flyspell-emacs-popup 'flyspell-emacs-popup-textual)))
   )

   (with-system darwin
     (define-key evil-normal-state-map "r" #'flyspell-correct-word-before-point)
     (eval-after-load "flyspell"
       '(progn
          (fset 'flyspell-emacs-popup 'flyspell-emacs-popup-textual)))
   )

   (with-system windows
     (define-key evil-normal-state-map "r" 'speck-popup-menu-at-point)
   )
  #+END_SRC

*** Indent Block Left
  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "\C-h" 'unindent-dwim)
  #+END_SRC

*** Indent Block Right
  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "\C-l" (lambda ()
        (interactive) (unindent-dwim -1)))
  #+END_SRC

*** Better Tab Behavior
  #+BEGIN_SRC emacs-lisp
  (define-key evil-insert-state-map [?\e delete] (lambda ()
        (interactive) (universal-argument) (delete-forward-char)))
  #+END_SRC

*** Navigate Splits
  #+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map "\M-j" 'evil-window-down)
  (define-key evil-motion-state-map "\M-k" 'evil-window-up)
  (define-key evil-motion-state-map "\M-h" 'evil-window-left)
  (define-key evil-motion-state-map "\M-l" 'evil-window-right)
  #+END_SRC

*** Resize Splits
  #+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map "\M-J" 'evil-window-increase-height)
  (define-key evil-motion-state-map "\M-K" 'evil-window-decrease-height)
  (define-key evil-motion-state-map "\M-H" 'evil-window-increase-width)
  (define-key evil-motion-state-map "\M-L" 'evil-window-decrease-width)
  #+END_SRC


*** Home Goes to Start of Text
  #+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "<home>") 'evil-first-non-blank-of-visual-line)
  (define-key evil-motion-state-map (kbd "<end>") 'evil-last-non-blank)
  #+END_SRC

*** Next Visual Line
  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  #+END_SRC

*** Make Horizontal Movement Cross Lines
  #+BEGIN_SRC emacs-lisp
  (setq-default evil-cross-lines t)
  #+END_SRC

*** Mac
  #+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
    (setq mac-command-modifier 'control)
  )
  #+END_SRC

** End of On Load
 #+BEGIN_SRC emacs-lisp
 )
 #+END_SRC
* Hooks
* Provide init-evil as a Package
#+BEGIN_SRC emacs-lisp
(provide 'init-evil)
#+END_SRC
